(*
    until => executa o estado em que estÃ¡ e transiciona para outro estado
    unless => transiciona para outro estado e executa o novo estado
*)

node rad(up1,down1,up2,down2,c1,c2: bool)
returns(power: int; rad_off,rad_frost: bool)
let
    automaton
     state Off do
        power = 0;
        rad_off = true;
        rad_frost = false;
     unless up1 or not c1 then FrostProtection
     state FrostProtection do
        power = 300;
        rad_off = false;
        rad_frost = true;
     unless up1 & c1 then Eco
        | down1 or not c1 then Off
     state Eco do
        power = 1500;
        rad_off = false;
        rad_frost = false;
     unless up2 & c2 then High
        | down1 or not c1 then FrostProtection 
     state High do
        power = 2000;
        rad_off = false;
        rad_frost = false;
     unless down1 or not c1 then Eco
        | down2 or not c2 then FrostProtection 
    end
tel

node wm(end_wm,start,c: bool)
returns(power: int)
let
    automaton
     state Off do
        power = 0;
     unless start then WaterFill
     state WaterFill do
        power = 15;
     unless end_wm & c then Washing
        | end_wm & not c then Standby
     state Washing do
        power = 250;
     unless end_wm then Rinse
     state Standby do
        power = 0;
     unless c then Washing
     state Rinse do
        power = 200;
     unless end_wm then Spin
     state Spin do
        power = 800;
     unless end_wm then Off
    end
tel

node oven(start,c,finish,temp_ok,cold: bool)
returns(power: int)
let
    automaton
     state Off do
        power = 0;
     unless start & c then Heat
        | start & not c then Standby
     state Heat do
        power = 1500;
     unless temp_ok then Maintain
        | finish then Off
     state Standby do
        power = 0;
     unless c then Heat
     state Maintain do
        power = 300;
     unless cold & c then Reheat
        | finish then Off
     state Reheat do
        power = 1000;
     unless temp_ok then Maintain
        | finish then Off
    end
tel

node door(push,c_door: bool)
returns(door_open: bool)
let
    automaton
     state Closed do
        door_open = false;
     unless push & c_door then Open
     state Open do
        door_open = true;
     unless push or not c_door then Closed
    end
tel

node lamp(turn,c1,c2: bool)
returns(lamp_on: bool)
let
    automaton
     state Off do
        lamp_on = false;
     unless (turn & c1) or c2 then Onn
     state Onn do
        lamp_on = true;
     unless (turn & c2) or c1 then Off
    end
tel

node room(presence: bool)
returns(room_oc: bool)
let
    automaton
     state Empty do
        room_oc = false;
     unless presence then Ocupied
     state Ocupied do
        room_oc = true;
     unless not presence then Empty
    end
tel

type mpswitch = MinimalSafety_out | Eco_out | Comfort_out

node mp(eco_input,comfort_input: bool)
returns(pl: mpswitch)
let
    automaton
     state MinimalSafety do
        pl = MinimalSafety_out;
     unless eco_input then Eco
        | comfort_input then Comfort
     state Eco do
        pl = Eco_out;
     unless comfort_input then Comfort
        | not eco_input then MinimalSafety
     state Comfort do
        pl = Comfort_out;
     unless eco_input then Eco
        | not comfort_input then MinimalSafety
    end
tel

node alltasks(up1,down1,up2,down2,end_wm,start_wm,start_oven,finish,temp_ok,cold,push,turn,presence,eco_input,comfort_input: bool)
returns(power_rad,power_wm,power_oven: int; rad_off,rad_frost,door_open,window_open,lamp_on,tv_on,room_oc: bool; pl: mpswitch)
contract
var r1, r2, r3, r4, r5: bool; totalPower: int;
let
    totalPower = power_rad + power_wm + power_oven;
    r1 = not room_oc or (lamp_on or tv_on);
    r2 = room_oc or not(door_open or window_open);
    r3 = not(door_open or window_open) or (rad_off or rad_frost);
    r4 = room_oc or (not(lamp_on or tv_on) & (rad_off or rad_frost));
    switch pl
        | MinimalSafety_out do r5 = totalPower <= 3000
        | Eco_out do r5 = totalPower <= 5000
        | Comfort_out do r5 = totalPower <= 7000
    end
tel
     enforce r1 & r2 & r3 & r4 & r5
     with (c1_rad,c2_rad,c_wm,c_oven,c_door,c1_lamp,c2_lamp:bool)
let
    (power_rad,rad_off,rad_frost) = inlined rad(up1,down1,up2,down2,c1_rad,c2_rad);
    power_wm = inlined wm(end_wm,start_wm,c_wm);
    power_oven = inlined oven(start_oven,c_oven,finish,temp_ok,cold);
    door_open = inlined door(push,c_door);
    window_open = inlined door(push,c_door);
    lamp_on = inlined lamp(turn,c1_lamp,c2_lamp);
    tv_on = inlined lamp(turn,c1_lamp,c2_lamp);
    room_oc = inlined room(presence);
    pl = inlined mp(eco_input,comfort_input)
tel
